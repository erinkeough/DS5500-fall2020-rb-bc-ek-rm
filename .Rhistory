year00 = as.integer(Data.Measurement.Year=="2000-2010"))%>%
dplyr::select(-Census.Tract.Code, -Data.Measurement.Year)
View(suff_numeric)
suff_numeric<-suffolk_df%>%
mutate(year90 = as.integer(Data.Measurement.Year=="1990-2000"),
year00 = as.integer(Data.Measurement.Year=="2000-2010"))%>%
dplyr::select(-Census.Tract.Code, -Data.Measurement.Year, -Gent_Label)
suff_numeric%>%cor()%>%corrplot()
suff_numeric%>%cor()%>%corrplot::corrplot()
?corrplot::corrplot()
suff_numeric%>%cor()%>%corrplot::corrplot(tl.pos = "n")
suff_numeric<-suffolk_df%>%
mutate(year90 = as.integer(Data.Measurement.Year=="1990-2000"))%>%
dplyr::select(-Census.Tract.Code, -Data.Measurement.Year, -Gent_Label)
suff_numeric%>%cor()%>%corrplot::corrplot(tl.pos = "n")
View(suff_numeric)
install.packages("randomForest")
library(randomForest)
rf_fit<-randomForest(Gent_Label~.-Census.Tract.Code, data=imbal_train)
View(suffolk_df)
rf_fit<-randomForest(Gent_Label~.-Data.Measurement.Year-Census.Tract.Code, data=imbal_train)
suff_numeric<-suffolk_df%>%
mutate(year90 = as.integer(Data.Measurement.Year=="1990-2000"))%>%
dplyr::select(-Census.Tract.Code, -Data.Measurement.Year)
rf_fit<-randomForest(Gent_Label~.-Data.Measurement.Year-Census.Tract.Code, data=suff_numeric)
rf_fit<-randomForest(Gent_Label~., data=suff_numeric)
?randomForest
View(suff_numeric)
suff_numeric<-suffolk_df%>%
dplyr::select(-Census.Tract.Code, -Data.Measurement.Year)
rf_fit<-randomForest(Gent_Label~., data=suff_numeric)
#Libraries required
library(tidyverse)
library(caret)
library(nnet)
library(MASS)
#load data from github
suffolk_df<- read_csv("https://raw.githubusercontent.com/erinkeough/DS5500-fall2020-rb-bc-ek-rm/master/census-csv/prop_change_suffolk_labeled.csv")
suffolk_df<-read_csv("census-csv/prop_change_suffolk_labeled.csv")
#Create Train-Test Split
set.seed(1)
trainIndex <- createDataPartition(suffolk_df$Gent_Label, p = .8,
list = FALSE,
times = 1)
imbal_train <- suffolk_df[trainIndex,]
imbal_valid <- suffolk_df[-trainIndex,]
# Resample the train data to account for class imbalance
#ctrl <- trainControl(method = "repeatedcv", repeats = 5,
#                     classProbs = TRUE,
#                     summaryFunction = twoClassSummary,
#                     sampling = "rose")
#set.seed(1)
#rose_inside <- train(Gent_Label~ .-Census.Tract.Code,
#                     data = imbal_train,
#                     method = "glm",
#                     family="binomial",
#                     metric = "ROC",
#                     trControl = ctrl)
#inside_resampling <- resamples(rose_inside)
#y_pred <- predict(rose_inside, data=imbal_valid)
#calc_acc(actual = default_tst$default,
#         predicted = predict(default_glm_mod, newdata = default_tst))
# Linear Discriminant Analysis ( using over quadratic because low n)
lda_cvfit<-lda(Gent_Label~.-Census.Tract.Code, data = suffolk_df, cv=T)
lda_cvpred<-predict(lda_cvfit, suffolk_df)
mean(lda_cvpred$class==suffolk_df$Gent_Label)
rf_fit<-randomForest(Gent_Label~., data=suff_numeric)
lda_cvpred
suff_numeric<-suffolk_df%>%
dplyr::select(-Census.Tract.Code, -Data.Measurement.Year, -Gent_Label)
suff_numeric%>%cor()%>%corrplot::corrplot(tl.pos = "n")
View(suff_numeric)
lda_cvfit
ggplot(data = suffolk_df)+
geom_point(aes(x=prop.change.population.race.Black,
y=prop.change.population.Owner.Occupied,
color=Gent_Label))
ggplot(data = suffolk_df)+
geom_point(aes(x=prop.change.population.race.Black,
y=prop.change.population.Owner.Occupied,
color=Gent_Label))+
xlim(-10,20)+ylim(-10,20)
ggplot(data = suffolk_df)+
geom_point(aes(x=prop.change.population.race.Black,
y=prop.change.population.Owner.Occupied,
color=Gent_Label))+
xlim(-10,10)+ylim(-10,10)
ggplot(data = suffolk_df)+
geom_point(aes(x=prop.change.population.race.Black,
y=prop.change.population.Owner.Occupied,
color=Gent_Label))+
xlim(-2,10)+ylim(-2,2)
ggplot(data = suffolk_df)+
geom_point(aes(x=prop.change.population.race.Black,
y=prop.change.population.Owner.Occupied,
color=Gent_Label), alpha=0.7)+
xlim(-2,10)+ylim(-2,2)
ggplot(data = suffolk_df)+
geom_point(aes(x=prop.change.population.race.Black,
y=prop.change.population.Owner.Occupied,
color=Gent_Label), alpha=0.7)+
xlim(-1,2)+ylim(-1,1)
ggplot(data = suffolk_df)+
geom_point(aes(x=prop.change.population.race.Black,
y=prop.change.housing.owner.occupied.householder.race.White,
color=Gent_Label), alpha=0.7)+
xlim(-1,2)+ylim(-1,1)
ggplot(data = suffolk_df)+
geom_point(aes(x=prop.change.population.race.Black,
y=prop.change.housing.owner.occupied.householder.race.White,
color=Gent_Label), alpha=0.7)+
xlim(-1,2)+ylim(-1,1)+labels(x="% Change in White Owner Occupied Housing", y="% Change in Black Residents")
ggplot(data = suffolk_df)+
geom_point(aes(x=prop.change.population.race.Black,
y=prop.change.housing.owner.occupied.householder.race.White,
color=Gent_Label), alpha=0.7)+
xlim(-1,2)+ylim(-1,1)+labels(x="% Change in White Owner Occupied Housing", y="% Change in Black Residents")
ggplot(data = suffolk_df)+
geom_point(aes(x=prop.change.population.race.Black,
y=prop.change.housing.owner.occupied.householder.race.White,
color=Gent_Label), alpha=0.7)+
xlim(-1,2)+ylim(-1,1)+
labels(title="Predicting Gentrification",x="% Change in White Owner Occupied Housing", y="% Change in Black Residents")
ggplot(data = suffolk_df)+
geom_point(aes(x=prop.change.population.race.Black,
y=prop.change.housing.owner.occupied.householder.race.White,
color=Gent_Label), alpha=0.7)+
xlim(-1,2)+ylim(-1,1)+
labels(title="Predicting Gentrification",x="% Change in White Owner Occupied Housing", y="% Change in Black Residents")
ggplot(data = suffolk_df)+
geom_point(aes(x=prop.change.population.race.Black,
y=prop.change.housing.owner.occupied.householder.race.White,
color=Gent_Label), alpha=0.7)+
xlim(-1,2)+ylim(-1,1)+
labels(title="Predicting Gentrification",x="Perc Change in White Owner Occupied Housing", y="Perc Change in Black Residents")
ggplot(data = suffolk_df)+
geom_point(aes(x=prop.change.population.race.Black,
y=prop.change.housing.owner.occupied.householder.race.White,
color=Gent_Label), alpha=0.7)+
xlim(-1,2)+ylim(-1,1)+
labs(title="Predicting Gentrification",x="Perc Change in White Owner Occupied Housing", y="Perc Change in Black Residents")
```{r, message=F,warning=F}
suff_numeric<-suffolk_df%>%
dplyr::select(-Census.Tract.Code, -Data.Measurement.Year)
rf_fit<-randomForest(Gent_Label~., data=suff_numeric)
View(suffolk_df)
ggplot(data = suffolk_df)+
geom_point(aes(x=Data.Measurement.Year,
y=prop.change.housing.owner.occupied.householder.race.White,
color=Gent_Label), alpha=0.7)+
xlim(-1,2)+ylim(-1,1)+
labs(title="Predicting Gentrification",x="Perc Change in White Owner Occupied Housing", y="Perc Change in Black Residents")
ggplot(data = suffolk_df)+
geom_point(aes(x=Data.Measurement.Year,
y=prop.change.housing.owner.occupied.householder.race.White,
color=Gent_Label), alpha=0.7)+ylim(-1,1)+
labs(title="Predicting Gentrification",x="Perc Change in White Owner Occupied Housing", y="Perc Change in Black Residents")
ggplot(data = suffolk_df)+
geom_point(aes(x=Data.Measurement.Year,
y=prop.change.housing.owner.occupied.householder.race.White,
color=Gent_Label), alpha=0.2)+ylim(-1,1)+
labs(title="Predicting Gentrification",x="Perc Change in White Owner Occupied Housing", y="Perc Change in Black Residents")
suff_intu<-suffolk_df%>%select(prop.change.population.young.adult,
prop.change.population.race.White,
prop.change.housing.householder.race.White,
prop.change.household.size,
Gent_Label)
suff_intu<-suffolk_df%>%dplyr::select(prop.change.population.young.adult,
prop.change.population.race.White,
prop.change.housing.householder.race.White,
prop.change.household.size,
Gent_Label)
lda_intu<-lda(Gent_Label~., data = suff_intu, cv=T)
lda_pred_intu<-predict(lda_intu, suffolk_df)
mean(lda_pred_intu$class==suffolk_df$Gent_Label)
names(suffolk_df)
suff_intu<-suffolk_df%>%dplyr::select(prop.change.population.young.adult,
prop.change.population.race.White,
prop.change.housing.householder.race.White,
prop.change.household.size,
prop.change.households.Nonfamily,
prop.change.Owner.Occupied,
Gent_Label)
View(suffolk_df)
suff_intu<-suffolk_df%>%dplyr::select(prop.change.population.young.adult,
prop.change.population.race.White,
prop.change.housing.householder.race.White,
prop.change.household.size,
prop.change.households.Nonfamily,
prop.change.housing.Owner.Occupied,
Gent_Label)
lda_intu<-lda(Gent_Label~., data = suff_intu, cv=T)
lda_pred_intu<-predict(lda_intu, suffolk_df)
mean(lda_pred_intu$class==suffolk_df$Gent_Label)
mean(lda_cvpred$class==suffolk_df$Gent_Label)
lda_intu
#Libraries required
library(tidyverse)
library(caret)
library(nnet)
library(MASS)
getwd()
suffolk_df<-read_csv("census-csv/prop_change_suffolk_labeled.csv")
lda_cvfit<-lda(Gent_Label~.-Census.Tract.Code, data = suffolk_df, cv=T)
lda_cvpred<-predict(lda_cvfit, suffolk_df)
mean(lda_cvpred$class==suffolk_df$Gent_Label)
View(suffolk_df)
suff_intu<-suffolk_df%>%dplyr::select(prop.change.population.young.adult,
prop.change.population.race.White,
prop.change.housing.householder.race.White,
prop.change.household.size,
Gent_Label)
lda_intu<-lda(Gent_Label~., data = suff_intu, cv=T)
lda_pred_intu<-predict(lda_intu, suffolk_df)
mean(lda_pred_intu$class==suffolk_df$Gent_Label)
lda_intu
plot(lda_intu)
plot.lda(lda_intu)
plot(lda_intu, panel=panel.lda)
class(lda_intu)
class(lda_pred_intu)
install.packages("glmnet")
library(glmnet)
?model.matrix
Volume
log(Volume)
model.matrix(Gent_Label~.-1,data = suffolk_df)
model.matrix(Gent_Label~.-Data.Measurement.Year-Census.Tract.Code-Gent_Label,data = suffolk_df)
model.matrix(Gent_Label~.-Data.Measurement.Year-Census.Tract.Code-Gent_Label-1,data = suffolk_df)
suff_data_matrix<-model.matrix(Gent_Label~.-Data.Measurement.Year-Census.Tract.Code-Gent_Label-1,data = suffolk_df)
response<-suffolk_df$Gent_Label
?glmnet
lasso<-glmnet(suff_data_matrix, response, alpha = 1, family="multinomial")
plot(lasso, xvar = "lambda", label=T)
cv.lasso<-cv.glmnet(suff_data_matrix, response, alpha=1, family="multinomial")
abline(v=cv.lasso$lambda.min, col="red")
abline(v=cv.lasso$lambda.1se, col="blue")
plot(lasso, xvar = "lambda", label=T)
abline(v=cv.lasso$lambda.min, col="red")
abline(v=cv.lasso$lambda.1se, col="blue")
cv.lasso$lambda.min
abline(v=log(cv.lasso$lambda.min), col="red")
abline(v=log(cv.lasso$lambda.1se), col="blue")
View(cv.lasso)
View(lasso)
?plot
plot(lasso, xvar = "lambda", label=T, xlim=c(-4, 0))
plot(lasso, xvar = "lambda", label=T, xlim=c(-4, -2), ylim=c(-0.5,0.5))
abline(v=log(cv.lasso$lambda.min), col="red")
abline(v=log(cv.lasso$lambda.1se), col="blue")
lasso[["a0"]]
plot(lasso, xvar = "lambda", label=T)
lbs_fun <- function(fit, offset_x=1, ...) {
L <- length(fit$lambda)
x <- log(fit$lambda[L])+ offset_x
y <- fit$beta[, L]
labs <- names(y)
text(x, y, labels=labs, ...)
}
lbs_fun(lasso)
lasso$beta[1]
lasso$beta[1][1]
lasso$beta[[1]]
lasso$beta[[1]][1]
lasso$beta[[1]]$Dimnames
lasso$beta$Eligible$Dimnames
lasso$beta$Eligible
colnames(lasso$beta$Eligible)
names(lasso$beta$Eligible)
lasso[["beta"]][["Eligible"]]@Dimnames
lasso[["beta"]][["Eligible"]]@Dimnames[[1]]
length(lasso$lambda)
lasso$beta[,85]
lasso$beta[,1]
lasso$beta[1]
lbs_fun <- function(fit, offset_x=1, ...) {
L <- length(fit$lambda)
x <- log(fit$lambda[L])+ offset_x
labs <- lasso[["beta"]][["Eligible"]]@Dimnames[[1]]
text(x, labels=labs, ...)
}
plot(lasso, xvar = "lambda", label=T)
lbs_fun(lasso)
abline(v=log(cv.lasso$lambda.min), col="red")
abline(v=log(cv.lasso$lambda.1se), col="blue")
View(lasso[["beta"]][["Eligible"]])
lasso[["beta"]][["Eligible"]]@Dimnames[[1]]
?text
lbs_fun <- function(fit, offset_x=1, ...) {
L <- length(fit$lambda)
x <- log(fit$lambda[L])+ offset_x
labs <- lasso[["beta"]][["Eligible"]]@Dimnames[[1]]
return(c(x,labs))
}
lbls<-lbs_fun(lasso)
lbs_fun <- function(fit, offset_x=1, ...) {
L <- length(fit$lambda)
x <- log(fit$lambda[L])+ offset_x
labs <- lasso[["beta"]][["Eligible"]]@Dimnames[[1]]
return(list(x,labs))
}
lbls<-lbs_fun(lasso)
plot(lasso, xvar = "lambda", label=T)
text(lbls[[1]], labels = lbls[[2]])
text(lbls[[1]], labels = lbls[[2]])
coef(cv.lasso)
coef(cv.lasso, s=cv.lasso$lambda.min)
abline(v=log(cv.lasso$lambda.min), col="red")
abline(v=log(cv.lasso$lambda.1se), col="blue")
abline(v=log(cv.lasso$lambda.min), col="red", lty=2)
lbls<-lbs_fun(lasso)
plot(lasso, xvar = "lambda", label=T)
text(lbls[[1]], ,labels = lbls[[2]])
abline(v=log(cv.lasso$lambda.min), col="red", lty=2)
plot(cv.lasso)
lasso<-glmnet(suff_data_matrix, response, alpha = 1, family="multinomial", type.multinomial = "grouped")
plot(lasso, xvar = "lambda", label=T)
plot(lasso, xvar = "lambda", label=T, type.coef = "Eligible")
suff_intu<-suffolk_df%>%dplyr::select(prop.change.housing.renter.occupied.householder.race.White,
prop.change.housing.owner.occupied.householder.race.Other,
prop.change.housing.owner.occupied.householder.race.Black,
Gent_Label)
lda_intu<-lda(Gent_Label~., data = suff_intu, cv=T)
lda_pred_intu<-predict(lda_intu, suffolk_df)
mean(lda_pred_intu$class==suffolk_df$Gent_Label)
acc_intu<-mean(lda_pred_intu$class==suffolk_df$Gent_Label)
acc_full<-mean(lda_cvpred$class==suffolk_df$Gent_Label)
lda_cvpred$posterior
lda_cvpred$posterior$Eligible
?prediction
?performance
lda_cvpred$class
simple_roc <- function(labels, scores){
labels <- labels[order(scores, decreasing=TRUE)]
data.frame(TPR=cumsum(labels)/sum(labels), FPR=cumsum(!labels)/sum(!labels), labels)
}
lda_correct<-(lda_cvpred$class==suffolk_df$Gent_Label)
ROC_lda<-simple_roc(lda_correct, lda_cvpred$posterior[,1])
View(ROC_lda)
ggplot(data = ROC_lda)+geom_line(aes(x=TPR, y=FPR))
which(ROC_lda$TPR+ROC_lda$FPR == max(ROC_lda$TPR+ROC_lda$FPR))
install.packages("pROC")
?roc.glmnet
?roc
ggplot(data = ROC_lda)+geom_line(aes(x=FPR, y=TPR))
ggplot(data = ROC_lda)+geom_line(aes(x=TPR, y=FPR))+labs(y="Sensitivity", x="Specificity")
?roc
roc(response=suffolk_df$Gent_Label, predicor=lda_cvpred$class)
pROC::roc(response=suffolk_df$Gent_Label, predicor=lda_cvpred$class)
aSAH
pROC::roc(response=suffolk_df$Gent_Label, predicor=lda_cvpred$class, data=suffolk_df)
pROC::roc(suffolk_df, response=suffolk_df$Gent_Label, predicor=lda_cvpred$class)
pROC::roc(suffolk_df, response=Gent_Label, predicor=lda_cvpred$class)
pROC::roc(response=suffolk_df$Gent_Label, predictor=lda_cvpred$class)
pROC::roc(response=suffolk_df$Gent_Label, predictor=lda_cvpred$posterior[,1])
pROC::roc(response=(suffolk_df$Gent_Label=="Eligible"), predictor=lda_cvpred$posterior[,1])
ROC_lda<-pROC::roc(response=(suffolk_df$Gent_Label=="Eligible"), predictor=lda_cvpred$posterior[,1])
plot(ROC_lda)
ROC_lda<-pROC::roc(response=(suffolk_df$Gent_Label=="Eligible"), predictor=lda_pred_intu$posterior[,1])
plot(ROC_lda)
ROC_lda
auc(ROC_lda)
acc_intu
acc_full
require(tidyverse)
bos_std<-read_csv("census-csv/prop_change_suffolk_labeled.csv")
names(bos_std)
names(bos_std)[1]
names(bos_std)[2]
names(bos_std)[3]
name<-names(bos_std)[3]
?str_detect
str_detect(name, "prop.change")
str_detect(name, "prop.change", negate = F)
str_detect(name, "prop.change", negate = T)
str_detect(name, "prop.changed")
str_match(name, "prop.change.")
?str_replace
str_replace(name, "prop.change.", "")
rename(bos_std, "dataMeas" = "Data.Measurement.Year")
View(bos_std)
for(name in names(bos_std)){
if(str_detect(name, "prop.change", negate = T)){next()}
bos_std<-rename(bos_std,
str_replace(name, "prop.change.", "") = name)
}
for(name in names(bos_std)){
if(str_detect(name, "prop.change", negate = T)){next()}
new<-str_replace(name, "prop.change.", "")
bos_std<-rename(bos_std, new = name)
}
rlang::last_error()
old_names<-names(bos_std)
for(name in old_names){print(name)}
bos_std<-read_csv("census-csv/prop_change_suffolk_labeled.csv")
for(name in old_names){
if(str_detect(name, "prop.change", negate = T)){next()}
new<-str_replace(name, "prop.change.", "")
names(bos_std)[names(bos_std) == name]<-new
}
old_names
bos_std<-read_csv("census-csv/prop_change_suffolk_labeled.csv")
old_names<-names(bos_std)
for(name in old_names){
if(str_detect(name, "prop.change", negate = T)){next()}
new<-str_replace(name, "prop.change.", "")
names(bos_std)[names(bos_std) == name]<-new
}
rm(old_names, name, new)
remove_str_name<-function(data, rem_str){
old_names<-names(data)
for(name in old_names){
if(str_detect(name, rem_str, negate = T)){next()}
new<-str_replace(name, rem_str, "")
names(data)[names(data) == name]<-new
}
}
bos_std<-read_csv("census-csv/prop_change_suffolk_labeled.csv")
remove_str_name(bos_std, "prop.change.")
remove_str_name<-function(data, rem_str){
old_names<-names(data)
for(name in old_names){
if(str_detect(name, rem_str, negate = T)){next()}
new<-str_replace(name, rem_str, "")
names(data)[names(data) == name]<-new
}
return(data)
}
bos_std<-remove_str_name(bos_std, "prop.change.")
install.packages("e1071")
require(e1071)
?svm
######################################################
bos_subset<-select(bos_std,
Gent_label,
housing.renter.occupied.householder.race.White,
housing.owner.occupied.householder.race.Black,
housing.owner.occupied.householder.race.Other)
######################################################
bos_subset<-select(bos_std,
Gent_Label,
housing.renter.occupied.householder.race.White,
housing.owner.occupied.householder.race.Black,
housing.owner.occupied.householder.race.Other)
svm_bos_subset<-svm(Gent_Label~., data=bos_subset)
View(iris)
class(bos_subset$Gent_Label)
######################################################
bos_subset<-mutate(bos_std, Gent_Label = as.factor(Gent_Label))%>%
select(Gent_Label,
housing.renter.occupied.householder.race.White,
housing.owner.occupied.householder.race.Black,
housing.owner.occupied.householder.race.Other)
class(bos_subset$Gent_Label)
svm_bos_subset<-svm(Gent_Label~., data=bos_subset)
bos_subset[,-1]
svm_pred<-predict(svm_bos_subset,  bos_subset[,-1], type="class")
table(pred=svm_pred, true = bos_subset[1])
table(pred=svm_pred, true = bos_subset[,1])
svm_pred<-predict(svm_bos_subset,  bos_subset[,-1])
table(pred=svm_pred, true = bos_subset[,1])
svm_pred
length(svm_pred)
length(bos_subset[,1])
bos_subset[,1]
bos_subset[,1][1]
length(bos_subset[,1][1])
as.array(bos_subset[,1])
bos_subset$Gent_Label
svm_pred<-predict(svm_bos_subset,  bos_subset$Gent_Label)
table(pred=svm_pred, true = bos_subset$Gent_Label)
mean(svm_pred == bos_subset$Gent_Label)
bos_ind<-1:nrow(bos_std)
?sample
sample_frac(bos_subset, size = 0.3)
.3*408
sample(bos_ind, 122)
round(3.33333)
round(3.53333)
bos_ind<-sample(nrow(bos_std), round(nrow(bos_std)/3))
bos_ind<-sample(nrow(bos_std), round(nrow(bos_std)/5))
bos_ind_all<-1:nrow(bos_std)
rm(bos_ind_all)
sub_test<-bos_subset[-bos_ind,]
sub_train<-bos_subset[-bos_ind,]
sub_test<-bos_subset[bos_ind,]
svm_c1<-svm(Gent_Label~., data=sub_train)
rm(svm_bos_subset)
rm(svm_pred)
svm_c100<-svm(Gent_Label~., data=sub_train)
print("this", "  That")
print(c("this", "  That"))
print(paste("C1:", mean(svm_c1==sub_train$Gent_Label)))
c1_pred<-predict(svm_c1, sub_train[-1,])
c100_pred<-predict(svm_c100, sub_train[-1,])
print(paste("C1:", mean(c1_pred==sub_train$Gent_Label)))
length(c1_pred)
length(sub_train$Gent_Label)
c1_pred<-predict(svm_c1, sub_train)
c100_pred<-predict(svm_c100, sub_train)
print(paste("C1:", mean(c1_pred==sub_train$Gent_Label)))
print(paste("C100:", mean(c100_pred==sub_train$Gent_Label)))
svm_c100<-svm(Gent_Label~., data=sub_train, c=100)
?svm
svm_c100<-svm(Gent_Label~., data=sub_train, cost=100)
c100_pred<-predict(svm_c100, sub_train)
print(paste("C100:", mean(c100_pred==sub_train$Gent_Label)))
print(paste("C1:", mean(c1_pred==sub_test$Gent_Label)))
c1_pred<-predict(svm_c1, sub_test)
print(paste("C1:", mean(c1_pred==sub_test$Gent_Label)))
c100_pred<-predict(svm_c100, sub_test)
print(paste("C100:", mean(c100_pred==sub_test$Gent_Label)))
